// Code generated by protoc-gen-go-kiwi. DO NOT EDIT.

package user

import (
	"game/internal/codec"
	"game/internal/common"
	"game/proto/pb"
	"github.com/15mga/kiwi"
	"github.com/15mga/kiwi/core"
	"github.com/15mga/kiwi/util"
)

func registerReq() {
	kiwi.Router().BindReq(common.User, codec.UserSignUpWithMobileReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserSignUpWithMobileReq](req, key, _svc.OnUserSignUpWithMobile)
	})
	kiwi.Router().BindReq(common.User, codec.UserSignInWithMobileReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserSignInWithMobileReq](req, key, _svc.OnUserSignInWithMobile)
	})
	kiwi.Router().BindReq(common.User, codec.UserResetPasswordWithMobileReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserResetPasswordWithMobileReq](req, key, _svc.OnUserResetPasswordWithMobile)
	})
	kiwi.Router().BindReq(common.User, codec.UserCodeWithMobileReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserCodeWithMobileReq](req, key, _svc.OnUserCodeWithMobile)
	})
	kiwi.Router().BindReq(common.User, codec.UserSignUpWithEmailReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserSignUpWithEmailReq](req, key, _svc.OnUserSignUpWithEmail)
	})
	kiwi.Router().BindReq(common.User, codec.UserSignInWithEmailReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserSignInWithEmailReq](req, key, _svc.OnUserSignInWithEmail)
	})
	kiwi.Router().BindReq(common.User, codec.UserResetPasswordWithEmailReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserResetPasswordWithEmailReq](req, key, _svc.OnUserResetPasswordWithEmail)
	})
	kiwi.Router().BindReq(common.User, codec.UserCodeWithEmailReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserCodeWithEmailReq](req, key, _svc.OnUserCodeWithEmail)
	})
	kiwi.Router().BindReq(common.User, codec.UserSignInWithWechatReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserSignInWithWechatReq](req, key, _svc.OnUserSignInWithWechat)
	})
	kiwi.Router().BindReq(common.User, codec.UserNewReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserNewReq](req, key, _svc.OnUserNew)
	})
	kiwi.Router().BindReq(common.User, codec.UserSignInReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserSignInReq](req, key, _svc.OnUserSignIn)
	})
	kiwi.Router().BindReq(common.User, codec.UserSignOutReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserSignOutReq](req, key, _svc.OnUserSignOut)
	})
	kiwi.Router().BindReq(common.User, codec.UserReconnectReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserReconnectReq](req, key, _svc.OnUserReconnect)
	})
	kiwi.Router().BindReq(common.User, codec.UserDisconnectReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserDisconnectReq](req, key, _svc.OnUserDisconnect)
	})
	kiwi.Router().BindReq(common.User, codec.UserUpdateHeadReq, func(req kiwi.IRcvRequest) {
		if _svc.IsShutdown() {
			return
		}
		_svc.Wait()
		req.SetReceiver(_svc)
		key, _ := util.MGet[string](req.Head(), "addr")
		core.ActivePrcReq[*pb.UserUpdateHeadReq](req, key, _svc.OnUserUpdateHead)
	})
}
