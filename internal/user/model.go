// Code generated by protoc-gen-go-kiwi. DO NOT EDIT.

package user

import (
	"game/proto/pb"
	"github.com/15mga/kiwi/util/mgo"
	"go.mongodb.org/mongo-driver/bson"
)

func InitModels() {
	initModelFac()
	initEvict()
}

var _ModelFac map[string]func() mgo.IModel

func initModelFac() {
	_ModelFac = map[string]func() mgo.IModel{
		SchemaUser: NewUser,
	}
}

func initEvict() {
	mgo.BindEvict(SchemaUser, onUserEvict)
}

var (
	_UserIdMap             = make(map[string]struct{})
	_UserNickToId          = make(map[string]string)
	_UserMobileToId        = make(map[string]string)
	_UserWechatUnionIdToId = make(map[string]string)
	_UserTokenToId         = make(map[string]string)
)

func StoreAllUsers() {
	for id := range _UserIdMap {
		m, ok := mgo.Get[*User](SchemaUser, id)
		if !ok {
			continue
		}
		m.Store()
	}
}

func setUser(m *User) {
	mgo.Set(m)
	_UserNickToId[m.Nick] = m.Id
	_UserMobileToId[m.Mobile] = m.Id
	_UserWechatUnionIdToId[m.WechatUnionId] = m.Id
	_UserTokenToId[m.Token] = m.Id
}

func DelUser(id string) {
	m, ok := mgo.Get[*User](SchemaUser, id)
	if !ok {
		return
	}
	_ = m.Store()
	mgo.Del(SchemaUser, id)
	delUserMap(m)
}

func onUserEvict(model mgo.IModel) {
	m := model.(*User)
	_ = m.Store()
	delUserMap(m)
}

func delUserMap(m *User) {
	delete(_UserIdMap, m.GetId())
	delete(_UserNickToId, m.Nick)
	delete(_UserMobileToId, m.Mobile)
	delete(_UserWechatUnionIdToId, m.WechatUnionId)
	delete(_UserTokenToId, m.Token)
}

func GetUserWithId(id string) *User {
	m, ok := mgo.Get[*User](SchemaUser, id)
	if ok {
		return m
	}
	m = _ModelFac[SchemaUser]().(*User)
	m.Load(id)
	setUser(m)
	return m
}

func GetUserWithNick(nick string) *User {
	id, ok := _UserNickToId[nick]
	if ok {
		m, ok := mgo.Get[*User](SchemaUser, id)
		if ok {
			return m
		}
	}
	m := _ModelFac[SchemaUser]().(*User)
	m.LoadWithFilter(bson.M{Nick: nick})
	setUser(m)
	return m
}

func GetUserWithMobile(mobile string) *User {
	id, ok := _UserMobileToId[mobile]
	if ok {
		m, ok := mgo.Get[*User](SchemaUser, id)
		if ok {
			return m
		}
	}
	m := _ModelFac[SchemaUser]().(*User)
	m.LoadWithFilter(bson.M{Mobile: mobile})
	setUser(m)
	return m
}

func GetUserWithWechatUnionId(wechatUnionId string) *User {
	id, ok := _UserWechatUnionIdToId[wechatUnionId]
	if ok {
		m, ok := mgo.Get[*User](SchemaUser, id)
		if ok {
			return m
		}
	}
	m := _ModelFac[SchemaUser]().(*User)
	m.LoadWithFilter(bson.M{WechatUnionId: wechatUnionId})
	setUser(m)
	return m
}

func GetUserWithToken(token string) *User {
	id, ok := _UserTokenToId[token]
	if ok {
		m, ok := mgo.Get[*User](SchemaUser, id)
		if ok {
			return m
		}
	}
	m := _ModelFac[SchemaUser]().(*User)
	m.LoadWithFilter(bson.M{Token: token})
	setUser(m)
	return m
}

func NewUser() mgo.IModel {
	m := &User{
		User: &pb.User{},
	}
	m.Model = mgo.NewModel(SchemaUser, 25, m.GetVal)
	return m
}

type User struct {
	*pb.User
	*mgo.Model
}

func (this *User) SetId(val string) {
	this.Id = val
	this.SetDirty(Id)
}

func (this *User) SetPassword(val string) {
	this.Password = val
	this.SetDirty(Password)
}

func (this *User) SetRoleMask(val int64) {
	this.RoleMask = val
	this.SetDirty(RoleMask)
}

func (this *User) SetBan(val bool) {
	this.Ban = val
	this.SetDirty(Ban)
}

func (this *User) SetNick(val string) {
	this.Nick = val
	this.SetDirty(Nick)
}

func (this *User) SetAddr(val string) {
	this.Addr = val
	this.SetDirty(Addr)
}

func (this *User) SetIdCard(val string) {
	this.IdCard = val
	this.SetDirty(IdCard)
}

func (this *User) SetRealName(val string) {
	this.RealName = val
	this.SetDirty(RealName)
}

func (this *User) SetMobile(val string) {
	this.Mobile = val
	this.SetDirty(Mobile)
}

func (this *User) SetSignUpTime(val int64) {
	this.SignUpTime = val
	this.SetDirty(SignUpTime)
}

func (this *User) SetLastSignInTime(val int64) {
	this.LastSignInTime = val
	this.SetDirty(LastSignInTime)
}

func (this *User) SetLastSignInIp(val string) {
	this.LastSignInIp = val
	this.SetDirty(LastSignInIp)
}

func (this *User) SetLastOfflineTime(val int64) {
	this.LastOfflineTime = val
	this.SetDirty(LastOfflineTime)
}

func (this *User) SetLastOs(val string) {
	this.LastOs = val
	this.SetDirty(LastOs)
}

func (this *User) SetState(val pb.OnlineState) {
	this.State = val
	this.SetDirty(State)
}

func (this *User) SetAvatar(val string) {
	this.Avatar = val
	this.SetDirty(Avatar)
}

func (this *User) SetWechatUnionId(val string) {
	this.WechatUnionId = val
	this.SetDirty(WechatUnionId)
}

func (this *User) SetToken(val string) {
	this.Token = val
	this.SetDirty(Token)
}

func (this *User) SetHead(val []byte) {
	this.Head = val
	this.SetDirty(Head)
}

func (this *User) SetOnlineDur(val int64) {
	this.OnlineDur = val
	this.SetDirty(OnlineDur)
}

func (this *User) SetTestBool(val []bool) {
	this.TestBool = val
	this.SetDirty(TestBool)
}

func (this *User) PushTestBool(items ...bool) {
	this.TestBool = append(this.TestBool, items...)
	this.SetDirty(TestBool)
}

func (this *User) AddToSetTestBool(items ...bool) {
	for _, item := range items {
		for _, v := range this.TestBool {
			if v == item {
				return
			}
		}
		this.TestBool = append(this.TestBool, item)
	}
	this.SetDirty(TestBool)
}

func (this *User) PullTestBool(items ...bool) {
	if this.TestBool == nil || len(this.TestBool) == 0 {
		return
	}
	dirty := false
	for _, item := range items {
		for i, v := range this.TestBool {
			if v == item {
				this.TestBool = append(this.TestBool[:i], this.TestBool[i+1:]...)
				dirty = true
				break
			}
		}
	}
	if dirty {
		this.SetDirty(TestBool)
	}
}

func (this *User) SetTestI32(val []int32) {
	this.TestI32 = val
	this.SetDirty(TestI32)
}

func (this *User) PushTestI32(items ...int32) {
	this.TestI32 = append(this.TestI32, items...)
	this.SetDirty(TestI32)
}

func (this *User) AddToSetTestI32(items ...int32) {
	for _, item := range items {
		for _, v := range this.TestI32 {
			if v == item {
				return
			}
		}
		this.TestI32 = append(this.TestI32, item)
	}
	this.SetDirty(TestI32)
}

func (this *User) PullTestI32(items ...int32) {
	if this.TestI32 == nil || len(this.TestI32) == 0 {
		return
	}
	dirty := false
	for _, item := range items {
		for i, v := range this.TestI32 {
			if v == item {
				this.TestI32 = append(this.TestI32[:i], this.TestI32[i+1:]...)
				dirty = true
				break
			}
		}
	}
	if dirty {
		this.SetDirty(TestI32)
	}
}

func (this *User) SetTestString(val []string) {
	this.TestString = val
	this.SetDirty(TestString)
}

func (this *User) PushTestString(items ...string) {
	this.TestString = append(this.TestString, items...)
	this.SetDirty(TestString)
}

func (this *User) AddToSetTestString(items ...string) {
	for _, item := range items {
		for _, v := range this.TestString {
			if v == item {
				return
			}
		}
		this.TestString = append(this.TestString, item)
	}
	this.SetDirty(TestString)
}

func (this *User) PullTestString(items ...string) {
	if this.TestString == nil || len(this.TestString) == 0 {
		return
	}
	dirty := false
	for _, item := range items {
		for i, v := range this.TestString {
			if v == item {
				this.TestString = append(this.TestString[:i], this.TestString[i+1:]...)
				dirty = true
				break
			}
		}
	}
	if dirty {
		this.SetDirty(TestString)
	}
}

func (this *User) SetTestData(val *pb.Test) {
	this.TestData = val
	this.SetDirty(TestData)
}

func (this *User) SetTestData2(val []*pb.Test) {
	this.TestData2 = val
	this.SetDirty(TestData2)
}

func (this *User) PushTestData2(items ...*pb.Test) {
	this.TestData2 = append(this.TestData2, items...)
	this.SetDirty(TestData2)
}

func (this *User) AddToSetTestData2(items ...*pb.Test) {
	for _, item := range items {
		for _, v := range this.TestData2 {
			if v == item {
				return
			}
		}
		this.TestData2 = append(this.TestData2, item)
	}
	this.SetDirty(TestData2)
}

func (this *User) PullTestData2(items ...*pb.Test) {
	if this.TestData2 == nil || len(this.TestData2) == 0 {
		return
	}
	dirty := false
	for _, item := range items {
		for i, v := range this.TestData2 {
			if v == item {
				this.TestData2 = append(this.TestData2[:i], this.TestData2[i+1:]...)
				dirty = true
				break
			}
		}
	}
	if dirty {
		this.SetDirty(TestData2)
	}
}

func (this *User) GetVal(key string) any {
	switch key {
	default:
		return nil
	}
}

func (this *User) Cost() int64 {
	var cost int64 = 0
	cost += int64(len(this.Id))
	cost += int64(len(this.Password))
	cost += 8 //RoleMask int64
	cost += 1 //Ban bool
	cost += int64(len(this.Nick))
	cost += int64(len(this.Addr))
	cost += int64(len(this.IdCard))
	cost += int64(len(this.RealName))
	cost += int64(len(this.Mobile))
	cost += 8 //SignUpTime int64
	cost += 8 //LastSignInTime int64
	cost += int64(len(this.LastSignInIp))
	cost += 8 //LastOfflineTime int64
	cost += int64(len(this.LastOs))
	cost += 4 //State enum
	cost += int64(len(this.Avatar))
	cost += int64(len(this.WechatUnionId))
	cost += int64(len(this.Token))
	cost += int64(len(this.Head))
	cost += 8 //OnlineDur int64
	cost += int64(len(this.TestBool))
	cost += 4 * int64(len(this.TestI32))
	for _, item := range this.TestString {
		cost += int64(len(item))
	}
	cost += int64(len(this.TestData.Name))
	cost += 4 //Age int32
	for _, item := range this.TestData2 {
		cost += int64(len(item.Name))
		cost += 4 //Age int32
	}
	return cost
}
