// Code generated by protoc-gen-go-kiwi. DO NOT EDIT.

package group

import (
	"game/internal/codec"
	"game/internal/common"
	"game/proto/pb"
	"github.com/15mga/kiwi"
	"github.com/15mga/kiwi/graph"
	"github.com/15mga/kiwi/mock"
	"github.com/15mga/kiwi/util"
	"strconv"
)

type Svc struct {
	svc
}

type svc struct {
	client *mock.Client
}

func InitClient(client *mock.Client) {
	s := &Svc{svc{client: client}}
	s.client.BindPointMsg("group", "GroupNew", s.inGroupNewReq)
	s.client.BindNetMsg(&pb.GroupNewRes{}, s.onGroupNewRes)
}

func (s *svc) Dispose() {
}

func (s *svc) AsyncReq(req util.IMsg) *util.Err {
	kiwi.Debug("request", util.M{string(req.ProtoReflect().Descriptor().Name()): req})
	svc, code := kiwi.Codec().MsgToSvcMethod(req)
	bytes, err := common.PackUserReq(svc, code, req)
	if err != nil {
		return err
	}
	return s.client.Dialer().Agent().Send(bytes)
}

func (s *svc) inGroupNewReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Group, codec.GroupNewReq)
	return s.AsyncReq(req)
}

func (s *svc) onGroupNewRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GroupNew", nil
}
