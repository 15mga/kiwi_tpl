// Code generated by protoc-gen-go-kiwi. DO NOT EDIT.

package user

import (
	"game/internal/codec"
	"game/internal/common"
	"game/proto/pb"
	"github.com/15mga/kiwi"
	"github.com/15mga/kiwi/graph"
	"github.com/15mga/kiwi/mock"
	"github.com/15mga/kiwi/util"
	"strconv"
)

type Svc struct {
	svc
}

type svc struct {
	client *mock.Client
}

func InitClient(client *mock.Client) {
	s := &Svc{svc{client: client}}
	s.client.BindPointMsg("user", "UserSignUp", s.inUserSignUpReq)
	s.client.BindNetMsg(&pb.UserSignUpRes{}, s.onUserSignUpRes)
	s.client.BindPointMsg("user", "UserSignIn", s.inUserSignInReq)
	s.client.BindNetMsg(&pb.UserSignInRes{}, s.onUserSignInRes)
	s.client.BindPointMsg("user", "UserResetPassword", s.inUserResetPasswordReq)
	s.client.BindNetMsg(&pb.UserResetPasswordRes{}, s.onUserResetPasswordRes)
	s.client.BindPointMsg("user", "UserSmsCode", s.inUserSmsCodeReq)
	s.client.BindNetMsg(&pb.UserSmsCodeRes{}, s.onUserSmsCodeRes)
	s.client.BindPointMsg("user", "UserSignOut", s.inUserSignOutReq)
	s.client.BindNetMsg(&pb.UserSignOutRes{}, s.onUserSignOutRes)
	s.client.BindPointMsg("user", "UserDisconnect", s.inUserDisconnectReq)
	s.client.BindNetMsg(&pb.UserDisconnectRes{}, s.onUserDisconnectRes)
	s.client.BindPointMsg("user", "UserUpdateHead", s.inUserUpdateHeadReq)
	s.client.BindNetMsg(&pb.UserUpdateHeadRes{}, s.onUserUpdateHeadRes)
}

func (s *svc) Dispose() {
}

func (s *svc) AsyncReq(req util.IMsg) *util.Err {
	kiwi.Debug("request", util.M{string(req.ProtoReflect().Descriptor().Name()): req})
	svc, code := kiwi.Codec().MsgToSvcMethod(req)
	bytes, err := common.PackUserReq(svc, code, req)
	if err != nil {
		return err
	}
	return s.client.Dialer().Agent().Send(bytes)
}

func (s *svc) inUserSignUpReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.User, codec.UserSignUpReq)
	return s.AsyncReq(req)
}

func (s *svc) onUserSignUpRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "UserSignUp", nil
}

func (s *svc) inUserSignInReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.User, codec.UserSignInReq)
	return s.AsyncReq(req)
}

func (s *svc) onUserSignInRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "UserSignIn", nil
}

func (s *svc) inUserResetPasswordReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.User, codec.UserResetPasswordReq)
	return s.AsyncReq(req)
}

func (s *svc) onUserResetPasswordRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "UserResetPassword", nil
}

func (s *svc) inUserSmsCodeReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.User, codec.UserSmsCodeReq)
	return s.AsyncReq(req)
}

func (s *svc) onUserSmsCodeRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "UserSmsCode", nil
}

func (s *svc) inUserSignOutReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.User, codec.UserSignOutReq)
	return s.AsyncReq(req)
}

func (s *svc) onUserSignOutRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "UserSignOut", nil
}

func (s *svc) inUserDisconnectReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.User, codec.UserDisconnectReq)
	return s.AsyncReq(req)
}

func (s *svc) onUserDisconnectRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "UserDisconnect", nil
}

func (s *svc) inUserUpdateHeadReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.User, codec.UserUpdateHeadReq)
	return s.AsyncReq(req)
}

func (s *svc) onUserUpdateHeadRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "UserUpdateHead", nil
}
