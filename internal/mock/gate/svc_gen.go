// Code generated by protoc-gen-go-kiwi. DO NOT EDIT.

package gate

import (
	"game/internal/codec"
	"game/internal/common"
	"game/proto/pb"
	"github.com/15mga/kiwi"
	"github.com/15mga/kiwi/graph"
	"github.com/15mga/kiwi/mock"
	"github.com/15mga/kiwi/util"
	"strconv"
)

type Svc struct {
	svc
}

type svc struct {
	client *mock.Client
}

func InitClient(client *mock.Client) {
	s := &Svc{svc{client: client}}
	s.client.BindPointMsg("gate", "GateHeartbeat", s.inGateHeartbeatReq)
	s.client.BindNetMsg(&pb.GateHeartbeatRes{}, s.onGateHeartbeatRes)
	s.client.BindNetMsg(&pb.GateErrPus{}, s.onGateErrPus)
	s.client.BindNetMsg(&pb.GateRepeatPus{}, s.onGateRepeatPus)
	s.client.BindPointMsg("gate", "GateUploadFile", s.inGateUploadFileReq)
	s.client.BindNetMsg(&pb.GateUploadFileRes{}, s.onGateUploadFileRes)
	s.client.BindPointMsg("gate", "GateUploadWithToken", s.inGateUploadWithTokenReq)
	s.client.BindNetMsg(&pb.GateUploadWithTokenRes{}, s.onGateUploadWithTokenRes)
	s.client.BindNetMsg(&pb.GateUploadWithTokenPus{}, s.onGateUploadWithTokenPus)
	s.client.BindPointMsg("gate", "GateBanAddr", s.inGateBanAddrReq)
	s.client.BindNetMsg(&pb.GateBanAddrRes{}, s.onGateBanAddrRes)
	s.client.BindPointMsg("gate", "GateSendToId", s.inGateSendToIdReq)
	s.client.BindNetMsg(&pb.GateSendToIdRes{}, s.onGateSendToIdRes)
	s.client.BindPointMsg("gate", "GateSendToAddr", s.inGateSendToAddrReq)
	s.client.BindNetMsg(&pb.GateSendToAddrRes{}, s.onGateSendToAddrRes)
	s.client.BindPointMsg("gate", "GateSendToMultiId", s.inGateSendToMultiIdReq)
	s.client.BindNetMsg(&pb.GateSendToMultiIdRes{}, s.onGateSendToMultiIdRes)
	s.client.BindPointMsg("gate", "GateSendToMultiAddr", s.inGateSendToMultiAddrReq)
	s.client.BindNetMsg(&pb.GateSendToMultiAddrRes{}, s.onGateSendToMultiAddrRes)
	s.client.BindPointMsg("gate", "GateSendToAll", s.inGateSendToAllReq)
	s.client.BindNetMsg(&pb.GateSendToAllRes{}, s.onGateSendToAllRes)
	s.client.BindPointMsg("gate", "GateCloseId", s.inGateCloseIdReq)
	s.client.BindNetMsg(&pb.GateCloseIdRes{}, s.onGateCloseIdRes)
	s.client.BindPointMsg("gate", "GateCloseAddr", s.inGateCloseAddrReq)
	s.client.BindNetMsg(&pb.GateCloseAddrRes{}, s.onGateCloseAddrRes)
	s.client.BindPointMsg("gate", "GateUpdate", s.inGateUpdateReq)
	s.client.BindNetMsg(&pb.GateUpdateRes{}, s.onGateUpdateRes)
	s.client.BindPointMsg("gate", "GateAddrUpdate", s.inGateAddrUpdateReq)
	s.client.BindNetMsg(&pb.GateAddrUpdateRes{}, s.onGateAddrUpdateRes)
	s.client.BindPointMsg("gate", "GateRemove", s.inGateRemoveReq)
	s.client.BindNetMsg(&pb.GateRemoveRes{}, s.onGateRemoveRes)
	s.client.BindPointMsg("gate", "GateAddrRemove", s.inGateAddrRemoveReq)
	s.client.BindNetMsg(&pb.GateAddrRemoveRes{}, s.onGateAddrRemoveRes)
	s.client.BindPointMsg("gate", "GateGet", s.inGateGetReq)
	s.client.BindNetMsg(&pb.GateGetRes{}, s.onGateGetRes)
	s.client.BindPointMsg("gate", "GateAddrGet", s.inGateAddrGetReq)
	s.client.BindNetMsg(&pb.GateAddrGetRes{}, s.onGateAddrGetRes)
}

func (s *svc) Dispose() {
}

func (s *svc) Req(req util.IMsg) *util.Err {
	kiwi.Debug("request", util.M{string(req.ProtoReflect().Descriptor().Name()): req})
	svc, code := kiwi.Codec().MsgToSvcMethod(req)
	bytes, err := common.PackUserReq(svc, code, req)
	if err != nil {
		return err
	}
	return s.client.Dialer().Agent().Send(bytes)
}

func (s *svc) inGateHeartbeatReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateHeartbeatReq)
	return s.Req(req)
}

func (s *svc) onGateHeartbeatRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateHeartbeat", nil
}

func (s *svc) onGateErrPus(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "", nil
}

func (s *svc) onGateRepeatPus(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "", nil
}

func (s *svc) inGateUploadFileReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateUploadFileReq)
	return s.Req(req)
}

func (s *svc) onGateUploadFileRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateUploadFile", nil
}

func (s *svc) inGateUploadWithTokenReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateUploadWithTokenReq)
	return s.Req(req)
}

func (s *svc) onGateUploadWithTokenRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateUploadWithToken", nil
}

func (s *svc) onGateUploadWithTokenPus(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "", nil
}

func (s *svc) inGateBanAddrReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateBanAddrReq)
	return s.Req(req)
}

func (s *svc) onGateBanAddrRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateBanAddr", nil
}

func (s *svc) inGateSendToIdReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateSendToIdReq)
	return s.Req(req)
}

func (s *svc) onGateSendToIdRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateSendToId", nil
}

func (s *svc) inGateSendToAddrReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateSendToAddrReq)
	return s.Req(req)
}

func (s *svc) onGateSendToAddrRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateSendToAddr", nil
}

func (s *svc) inGateSendToMultiIdReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateSendToMultiIdReq)
	return s.Req(req)
}

func (s *svc) onGateSendToMultiIdRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateSendToMultiId", nil
}

func (s *svc) inGateSendToMultiAddrReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateSendToMultiAddrReq)
	return s.Req(req)
}

func (s *svc) onGateSendToMultiAddrRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateSendToMultiAddr", nil
}

func (s *svc) inGateSendToAllReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateSendToAllReq)
	return s.Req(req)
}

func (s *svc) onGateSendToAllRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateSendToAll", nil
}

func (s *svc) inGateCloseIdReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateCloseIdReq)
	return s.Req(req)
}

func (s *svc) onGateCloseIdRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateCloseId", nil
}

func (s *svc) inGateCloseAddrReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateCloseAddrReq)
	return s.Req(req)
}

func (s *svc) onGateCloseAddrRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateCloseAddr", nil
}

func (s *svc) inGateUpdateReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateUpdateReq)
	return s.Req(req)
}

func (s *svc) onGateUpdateRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateUpdate", nil
}

func (s *svc) inGateAddrUpdateReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateAddrUpdateReq)
	return s.Req(req)
}

func (s *svc) onGateAddrUpdateRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateAddrUpdate", nil
}

func (s *svc) inGateRemoveReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateRemoveReq)
	return s.Req(req)
}

func (s *svc) onGateRemoveRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateRemove", nil
}

func (s *svc) inGateAddrRemoveReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateAddrRemoveReq)
	return s.Req(req)
}

func (s *svc) onGateAddrRemoveRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateAddrRemove", nil
}

func (s *svc) inGateGetReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateGetReq)
	return s.Req(req)
}

func (s *svc) onGateGetRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateGet", nil
}

func (s *svc) inGateAddrGetReq(msg graph.IMsg) *util.Err {
	req := s.client.GetRequest(common.Gate, codec.GateAddrGetReq)
	return s.Req(req)
}

func (s *svc) onGateAddrGetRes(msg util.IMsg) (point string, data any) {
	sc := kiwi.MergeSvcCode(kiwi.Codec().MsgToSvcMethod(msg))
	s.client.Graph().Data().Set(strconv.Itoa(int(sc)), msg)
	return "GateAddrGet", nil
}
